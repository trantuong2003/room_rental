@extends('layouts.customer')
@section('content')
<div class="container">
    <h1>C·ªông ƒë·ªìng t√¨m ng∆∞·ªùi ·ªü c√πng</h1>
    @foreach($posts as $post)
    <div class="list-post-container">
        <div class="post-find-roommate">
            <div class="post-find-roommate-header">
                <h4>{{ $post->user->name }}</h4>
                <p>{{ $post->approved_at ? \Carbon\Carbon::parse($post->approved_at)->diffForHumans() : 'Ch∆∞a ƒë∆∞·ª£c duy·ªát' }}</p>
            </div>
            <div class="post-find-roommate-content">
                <h3><strong>{{ $post->title }}</strong></h3>
                <p>{{ $post->content }}</p>
                <p>Contact: {{ $post->user->phone }}</p>
            </div>
            <div class="post-find-roommate-actions">
                <button class="like-btn" 
                        data-post-id="{{ $post->id }}" 
                        data-post-type="customer"
                        data-url="{{ route('customer.post.toggleFavorite') }}">
                    @if(Auth::check() && $post->isFavorited)
                        ‚ù§Ô∏è ƒê√£ th√≠ch
                    @else
                        ü§ç Th√≠ch
                    @endif
                    (<span class="like-count">{{ $post->favoritedby->count() }}</span>)
                </button>
                <button class="comment-toggle">üí¨ B√¨nh lu·∫≠n (<span class="comment-count">{{ $post->comments->count() }}</span>)</button>
                <button>üîó Nh·∫Øn tin</button>
            </div>

            <!-- Ph·∫ßn b√¨nh lu·∫≠n -->
            <div class="post-find-roommate-comments hidden">
                <!-- Form b√¨nh lu·∫≠n -->
                <div class="post-find-roommate-add-comment">
                    <form action="{{ route('customer.comments.store', $post->id) }}" method="POST" class="comment-form">
                        @csrf
                        <input type="hidden" name="post_type" value="customer">
                        <textarea name="content" placeholder="Vi·∫øt b√¨nh lu·∫≠n..." rows="2" required></textarea>
                        <button type="submit" class="submit-comment">G·ª≠i</button>
                    </form>
                </div>

                <!-- Danh s√°ch b√¨nh lu·∫≠n -->
                <div class="comments-list">
                    @foreach($post->comments->where('parent_id', null) as $comment)
                    <!-- B√¨nh lu·∫≠n ch√≠nh -->
                    <div class="comment" data-comment-id="{{ $comment->id }}">
                        <div class="comment-avatar">
                            <i class="fas fa-user-circle"></i>
                        </div>
                        <div class="comment-content">
                            <div class="comment-header">
                                <span class="comment-author">{{ $comment->user->name }}</span>
                                <span class="comment-time">{{ $comment->created_at->diffForHumans() }}</span>
                                @if(Auth::id() == $comment->user_id)
                                <button class="edit-comment-btn">S·ª≠a</button>
                                @endif
                            </div>
                            <p class="comment-text">{{ $comment->content }}</p>
                            <div class="comment-actions">
                                <button class="reply-btn">Tr·∫£ l·ªùi</button>
                                @if($comment->replies->count() > 0)
                                <button class="view-replies">Xem {{ $comment->replies->count() }} tr·∫£ l·ªùi</button>
                                @endif
                            </div>

                            <!-- Form s·ª≠a b√¨nh lu·∫≠n (·∫©n ban ƒë·∫ßu) -->
                            <div class="edit-comment-form hidden">
                                <form action="{{ route('customer.comments.update', $comment->id) }}" method="POST" class="update-comment-form">
                                    @csrf
                                    @method('PUT')
                                    <textarea name="content" rows="2">{{ $comment->content }}</textarea>
                                    <div class="edit-actions">
                                        <button type="submit" class="save-edit">L∆∞u</button>
                                        <button type="button" class="cancel-edit">H·ªßy</button>
                                    </div>
                                </form>
                            </div>

                            <!-- C√°c tr·∫£ l·ªùi -->
                            <div class="replies hidden">
                                @foreach($comment->replies as $reply)
                                <!-- Tr·∫£ l·ªùi -->
                                <div class="reply" data-comment-id="{{ $reply->id }}">
                                    <div class="comment-avatar">
                                        <i class="fas fa-user-circle"></i>
                                    </div>
                                    <div class="comment-content">
                                        <div class="comment-header">
                                            <span class="comment-author">{{ $reply->user->name }}</span>
                                            <span class="comment-time">{{ $reply->created_at->diffForHumans() }}</span>
                                            @if(Auth::id() == $reply->user_id)
                                            <button class="edit-comment-btn">S·ª≠a</button>
                                            @endif
                                        </div>
                                        <p class="comment-text">{{ $reply->content }}</p>
                                    </div>

                                    <!-- Form s·ª≠a tr·∫£ l·ªùi (·∫©n ban ƒë·∫ßu) -->
                                    <div class="edit-comment-form hidden">
                                        <form action="{{ route('customer.comments.update', $reply->id) }}" method="POST" class="update-comment-form">
                                            @csrf
                                            @method('PUT')
                                            <textarea name="content" rows="2">{{ $reply->content }}</textarea>
                                            <div class="edit-actions">
                                                <button type="submit" class="save-edit">L∆∞u</button>
                                                <button type="button" class="cancel-edit">H·ªßy</button>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                                @endforeach

                                <!-- Form tr·∫£ l·ªùi (·∫©n ban ƒë·∫ßu) -->
                                <div class="reply-form hidden">
                                    <form action="{{ route('customer.comments.store', $post->id) }}" method="POST" class="reply-comment-form">
                                        @csrf
                                        <input type="hidden" name="post_type" value="customer">
                                        <input type="hidden" name="parent_id" value="{{ $comment->id }}">
                                        <textarea name="content" placeholder="Vi·∫øt tr·∫£ l·ªùi..." rows="1" required></textarea>
                                        <div class="reply-actions">
                                            <button type="submit" class="submit-reply">G·ª≠i</button>
                                            <button type="button" class="cancel-reply">H·ªßy</button>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                    @endforeach
                </div>
            </div>
        </div>
    </div>
    @endforeach
</div>
@endsection

@section('scripts')
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // CSRF token cho AJAX
        $.ajaxSetup({
            headers: {
                'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
            }
        });

        // Toggle hi·ªÉn th·ªã ph·∫ßn b√¨nh lu·∫≠n
        document.querySelectorAll('.comment-toggle').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const commentsSection = this.closest('.post-find-roommate').querySelector('.post-find-roommate-comments');
                commentsSection.classList.toggle('hidden');
            });
        });
        
        // Toggle hi·ªÉn th·ªã c√°c tr·∫£ l·ªùi
        document.querySelectorAll('.view-replies').forEach(btn => {
            btn.addEventListener('click', function() {
                const repliesContainer = this.closest('.comment-content').querySelector('.replies');
                repliesContainer.classList.toggle('hidden');
                
                // ƒê·ªïi text n√∫t
                if (repliesContainer.classList.contains('hidden')) {
                    this.textContent = 'Xem ' + this.dataset.count + ' tr·∫£ l·ªùi';
                } else {
                    this.textContent = '·∫®n tr·∫£ l·ªùi';
                }
            });
        });
        
        // Toggle form tr·∫£ l·ªùi
        document.querySelectorAll('.reply-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const replyForm = this.closest('.comment-content').querySelector('.reply-form');
                if (replyForm) {
                    replyForm.classList.toggle('hidden');
                }
            });
        });
        
        // H·ªßy tr·∫£ l·ªùi
        document.querySelectorAll('.cancel-reply, .cancel-edit').forEach(btn => {
            btn.addEventListener('click', function() {
                this.closest('.reply-form, .edit-comment-form').classList.add('hidden');
            });
        });
        
        // Toggle form s·ª≠a b√¨nh lu·∫≠n
        document.querySelectorAll('.edit-comment-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const editForm = this.closest('.comment-content').querySelector('.edit-comment-form');
                if (editForm) {
                    editForm.classList.toggle('hidden');
                }
            });
        });

        // X·ª≠ l√Ω like b√†i ƒëƒÉng
        document.querySelectorAll('.like-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const postId = this.dataset.postId;
                const postType = this.dataset.postType;
                const likeCount = this.querySelector('.like-count');
                const likeBtn = this;
                
                $.ajax({
                    url: this.dataset.url,
                    method: 'POST',
                    data: {
                        post_id: postId,
                        post_type: postType
                    },
                    success: function(response) {
                        if (response.status === 'added') {
                            likeBtn.innerHTML = '‚ù§Ô∏è ƒê√£ th√≠ch (<span class="like-count">' + (parseInt(likeCount.textContent) + 1) + '</span>)';
                        } else {
                            likeBtn.innerHTML = 'ü§ç Th√≠ch (<span class="like-count">' + (parseInt(likeCount.textContent) - 1) + '</span>)';
                        }
                        likeCount.textContent = response.status === 'added' ? 
                            parseInt(likeCount.textContent) + 1 : 
                            parseInt(likeCount.textContent) - 1;
                    },
                    error: function(xhr) {
                        if (xhr.status === 401) {
                            window.location.href = "{{ route('login') }}";
                        } else {
                            alert('C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i');
                        }
                    }
                });
            });
        });

        // X·ª≠ l√Ω form b√¨nh lu·∫≠n b·∫±ng AJAX
        function handleCommentFormSubmit(form, successCallback) {
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                const formData = new FormData(this);
                const postId = this.closest('.post-find-roommate-comments')?.querySelector('.comment-form')?.action.split('/').pop();
                
                fetch(this.action, {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        if (typeof successCallback === 'function') {
                            successCallback(data);
                        }
                        this.reset();
                        location.reload(); // T·∫£i l·∫°i trang ƒë·ªÉ c·∫≠p nh·∫≠t b√¨nh lu·∫≠n
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('C√≥ l·ªói x·∫£y ra khi g·ª≠i b√¨nh lu·∫≠n');
                });
            });
        }

        // √Åp d·ª•ng x·ª≠ l√Ω cho t·∫•t c·∫£ c√°c form b√¨nh lu·∫≠n
        document.querySelectorAll('.comment-form, .reply-comment-form, .update-comment-form').forEach(form => {
            handleCommentFormSubmit(form, function(data) {
                // C√≥ th·ªÉ th√™m x·ª≠ l√Ω t√πy ch·ªânh ·ªü ƒë√¢y n·∫øu c·∫ßn
            });
        });
    });
</script>
@endsection